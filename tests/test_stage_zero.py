import pytest
import shutil
import pathlib
from mkvremux import MKV
from tests.env import test_paths


class TestPreProcess:
    @pytest.fixture(autouse=True)
    def clean_artifacts(self):
        """ In case a previous test failed. Remove any artifacts """
        p = pathlib.Path('tests/processing/1_remux')
        for item in p.iterdir():
            item.unlink()

    @pytest.fixture(autouse=True)
    def create_environment(self):
        """ Stage test files where they need to be """
        shutil.copy(test_paths['stage_0']['good'], 'tests/processing/0_analyze')

    def test_command_is_set(self):
        """ Is the command generated by pre_process correct?

            Expected behavior:
                - MKV will be analyzed
                - Command to transition from stage 0 -> stage 1 will be generated

            Expected values:
                - len(cmd_list)     -> 1
                -

        """
        p = pathlib.Path('tests/processing/0_analyze/Stage 0 Test Good.mkv')
        mkv = MKV(p, 0)
        mkv.pre_process()
        mkv._set_command()

        expected = ['ffmpeg', '-hide_banner', '-i', 'tests\\processing\\0_analyze\\Stage 0 Test Good.mkv',
                    '-map', '0:0', '-map', '0:1', '-map_metadata', '0', '-metadata',
                    'title=Stage 0 Test Good', '-metadata:s:v:0', 'title=h264 Remux',
                    '-metadata:s:a:0', 'title=DTS-HD MA 7.1', '-c', 'copy',
                    'tests\\processing\\1_remux\\Stage 0 Test Good.mkv']

        assert len(mkv.cmd_list) == 1
        assert mkv.cmd_list[0] == expected


class TestCommandExec:
    """ Tests Stage 0 """

    @pytest.fixture(autouse=True)
    def clean_artifacts(self):
        """ In case a previous test failed. Remove any artifacts """
        paths = [
            pathlib.Path('tests/processing/0_analyze'),
            pathlib.Path('tests/processing/1_remux'),
            pathlib.Path('tests/processing/2_mix'),
            pathlib.Path('tests/processing/3_review')
        ]

        for p in paths:
            for item in p.iterdir():
                item.unlink()

    @pytest.fixture(autouse=True)
    def create_environment(self):
        """ Stage test files where they need to be """
        shutil.copy(test_paths['stage_0']['good'], 'tests/processing/0_analyze')
        shutil.copy(test_paths['stage_1']['good'], 'tests/processing/1_remux')

    def test_stage_0(self):
        p = pathlib.Path('tests/processing/0_analyze/Stage 0 Test Good.mkv')
        mkv = MKV(p, 0)
        mkv.pre_process()

        print(mkv.cmd_list)

        mkv.run_commands()
